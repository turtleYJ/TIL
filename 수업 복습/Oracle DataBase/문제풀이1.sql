-- SELF STUDY WORKBOOK
CREATE TABLE TB_DEPARTMENT(
    DEPARTMENT_NO   VARCHAR2(10) PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(20) NOT NULL,
    CATEGORY        VARCHAR2(20),
    OPEN_YN         CHAR(1) DEFAULT 'Y',
    CAPACITY        NUMBER
);

COMMENT ON COLUMN TB_DEPARTMENT.DEPARTMENT_NO IS '학과 번호';
COMMENT ON COLUMN TB_DEPARTMENT.DEPARTMENT_NAME IS '학과 이름';
COMMENT ON COLUMN TB_DEPARTMENT.CATEGORY IS '계열';
COMMENT ON COLUMN TB_DEPARTMENT.OPEN_YN IS '개설 여부';
COMMENT ON COLUMN TB_DEPARTMENT.CAPACITY IS '정원';

-- 아직
CREATE TABLE TB_STUDENT(
    STUDENT_NO VARCHAR2(10) PRIMARY KEY,
    DEPARTMENT_NO VARCHAR2(10) REFERENCES TB_DEPARTMENT,
    STUDENT_NAME VARCHAR2(30) NOT NULL,
    STUDENT_SSN VARCHAR2(14),
    STUDENT_ADDRESS VARCHAR2(100),
    ENTRANCE_DATE DATE DEFAULT SYSDATE,
    ABSENCE_YN CHAR(1) DEFAULT 'N',
    COACH_PROFESSOR_NO VARCHAR2(10) REFERENCES TB_PROFESSOR
);

COMMENT ON COLUMN TB_STUDENT.STUDENT_NO IS '학생 번호'; 
COMMENT ON COLUMN TB_STUDENT.DEPARTMENT_NO IS '학과 번호'; 
COMMENT ON COLUMN TB_STUDENT.STUDENT_NAME IS '학생 이름'; 
COMMENT ON COLUMN TB_STUDENT.STUDENT_SSN IS '학생 주민번호'; 
COMMENT ON COLUMN TB_STUDENT.STUDENT_ADDRESS IS '학생 주소'; 
COMMENT ON COLUMN TB_STUDENT.ENTRANCE_DATE IS '입학 일자'; 
COMMENT ON COLUMN TB_STUDENT.ABSENCE_YN IS '휴학 여부'; 
COMMENT ON COLUMN TB_STUDENT.COACH_PROFESSOR_NO IS '지도 교수 번호'; 




DROP TABLE TB_BOOK;
DROP TABLE TB_MEMBER;
DROP TABLE TB_RENT;
DROP TABLE TB_PUBLISHER;


--
CREATE TABLE TB_CLASS(
    CLASS_NO                VARCHAR2(10) PRIMARY KEY,
    DEPARTMENT_NO           VARCHAR2(10) REFERENCES TB_DEPARTMENT,
    PREATTENDING_CLASS_NO   VARCHAR2(10) REFERENCES TB_CLASS,
    CLASS_NAME              VARCHAR2(30) NOT NULL,
    CLASS_TYPE              VARCHAR2(10)
);

COMMENT ON COLUMN TB_CLASS.CLASS_NO IS '과목 번호'; 
COMMENT ON COLUMN TB_CLASS.DEPARTMENT_NO IS '학과 번호'; 
COMMENT ON COLUMN TB_CLASS.PREATTENDING_CLASS_NO IS '선수 과목 번호'; 
COMMENT ON COLUMN TB_CLASS.CLASS_NAME IS '과목 이름'; 
COMMENT ON COLUMN TB_CLASS.CLASS_TYPE IS '과목 구분'; 



CREATE TABLE TB_CLASS_PROFESSOR(
    CLASS_NO        VARCHAR2(10) REFERENCES TB_CLASS PRIMARY KEY,
    PROFESSOR_NO    VARCHAR2(10) REFERENCES TB_PROFESSOR
);

COMMENT ON COLUMN TB_CLASS_PROFESSOR.CLASS_NO IS '과목 번호'; 
COMMENT ON COLUMN TB_CLASS_PROFESSOR.PROFESSOR_NO IS '교수 번호'; 


CREATE TABLE TB_PROFESSOR(
    PROFESSOR_NO        VARCHAR2(10) PRIMARY KEY,
    PROFESSOR_NAME      VARCHAR2(30) NOT NULL,
    PROFESSOR_SSN       VARCHAR2(14),
    PROFESSOR_ADDRESS   VARCHAR2(100),
    DEPARTMENT_NO       VARCHAR2(10) REFERENCES TB_DEPARTMENT
);

COMMENT ON COLUMN TB_PROFESSOR.PROFESSOR_NO IS '교수 번호'; 
COMMENT ON COLUMN TB_PROFESSOR.PROFESSOR_NAME IS '교수 이름'; 
COMMENT ON COLUMN TB_PROFESSOR.PROFESSOR_SSN IS '교수 주민번호'; 
COMMENT ON COLUMN TB_PROFESSOR.PROFESSOR_ADDRESS IS '교수 주소'; 
COMMENT ON COLUMN TB_PROFESSOR.DEPARTMENT_NO IS '학과 번호'; 



CREATE TABLE TB_GRADE(
    TERM_NO     VARCHAR2(10) PRIMARY KEY,
    CLASS_NO    VARCHAR2(10) REFERENCES TB_CLASS,
    STUDENT_NO  VARCHAR2(10) REFERENCES TB_STUDENT,
    POINT       NUMBER(3,2)
);

COMMENT ON COLUMN TB_GRADE.TERM_NO IS '학기 번호'; 
COMMENT ON COLUMN TB_GRADE.CLASS_NO IS '과목 번호'; 
COMMENT ON COLUMN TB_GRADE.STUDENT_NO IS '학생 번호'; 
COMMENT ON COLUMN TB_GRADE.POINT IS '학점'; 

--------------------------------------------------BASIC SELECT----------------------------------------------------

DROP TABLE TB_CLASS_PROFESSOR;

SELECT * FROM TB_CLASS;
SELECT * FROM TB_CLASS_PROFESSOR;
SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_GRADE;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_STUDENT;

SELECT *
FROM TB_STUDENT
WHERE STUDENT_NO = '9815147';

SELECT * FROM TB_DEPARTMENT;
-- 1. 춘 기술대학교의 학과 이름과 계열을 표시하시오. 단, 출력 헤더는 "학과 명", "계열"으로 표시하도록 한다.
SELECT DEPARTMENT_NAME AS "학과 명",
       CATEGORY        AS "계열"
FROM   TB_DEPARTMENT;

-- 2. 학과의 학과 정원을 다음과 같은 형태로 화면에 출력한다.
SELECT DEPARTMENT_NAME || '의 정원은 ' || CAPACITY || '명 입니다.' AS "학과별 정원"
FROM   TB_DEPARTMENT;

-- 3. "국어국문학과"에 다니는 여학생 중 현재 휴학중인 여학생을 찾아달라는 요청이 들어왔다. 누구인가? (국문학과의 '학과코드'(001)는 학과 테이블(TB_DEPARTMENT)을 조회해서 찾아내도록 하자)
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE DEPARTMENT_NO = 001 AND ABSENCE_YN = 'Y';

-- 4. 도서관에서 대출 도서 장기 연체자 들을 찾아 이름을 게시하고자 한다. 그 대상자들의 학번이 다음과 같을 때 대상자들을 찾는 적절한 SQL구문을 작성하시오.
SELECT * FROM TB_STUDENT;

SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO IN ('A513079', 'A513090', 'A513091', 'A513110', 'A513119')
ORDER BY STUDENT_NO DESC;

-- 5. 입학정원이 20명 이상 30명 이하인 학과들의 학과이름과 계열을 출력하시오.
SELECT * FROM TB_DEPARTMENT;

SELECT DEPARTMENT_NAME, CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY BETWEEN 20 AND 30;

-- 6. 춘 기술대학교는 총장을 제외하고 모든 교수들이 소속 학과를 가지고 있다. 그럼 춘 기술대학교 총장의 이름을 알아낼 수 있는 SQL 문장을 작성하시오.
SELECT * FROM TB_PROFESSOR;

SELECT PROFESSOR_NAME 
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

-- 7. 혹시 전산상의 착오로 학과가 지정되어 있지 않은 학생이 있는지 확인하고자 한다.
-- 어떠한 SQL 문장을 사용하면 될 것인지 작성하시오.
SELECT * FROM TB_STUDENT;

SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE DEPARTMENT_NO IS NULL;

-- 8. 수강신청을 하려고 한다. 선수과목 여부를 확인해야 하는데, 선수과목이 존재하는 과목들은 어떤 과목인지 과목번호를 조회해보시오.
SELECT * FROM TB_CLASS;

SELECT C1.CLASS_NO, C1.CLASS_NAME, C1.PREATTENDING_CLASS_NO, C2.CLASS_NAME
FROM TB_CLASS C1
JOIN TB_CLASS C2 ON(C1.preattending_class_no = C2.CLASS_NO)
WHERE C1.preattending_class_no IS NOT NULL;

-- 9. 춘 대학에는 어떤 계열(CATEGORY)들이 있는지 조회해보시오.
SELECT * FROM TB_DEPARTMENT;

SELECT DISTINCT CATEGORY
FROM TB_DEPARTMENT;

-- 10. 02학번 전주 거주자들의 모임을 만들려고 한다. 휴학한 사람들은 제외한 재학중인 학생들의 학번, 이름, 주민번호를 출력하는 구문을 작성하시오.
SELECT * FROM TB_STUDENT;

SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE STUDENT_ADDRESS LIKE '%전주%'
AND   ABSENCE_YN = 'N'
AND   SUBSTR(ENTRANCE_DATE, 1, 2) = 02;

-------------------------------------------------- 함수 ----------------------------------------------------
SELECT * FROM TB_CLASS;
SELECT * FROM TB_CLASS_PROFESSOR;
SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_GRADE;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_STUDENT;

-- 1. 영어영문학과(학과코드 002) 학생들의 학번과 이름, 입학년도를 입학 년도가 빠른 순으로 표시하는 SQL문장을 작성하시오.
SELECT * FROM TB_STUDENT;

SELECT STUDENT_NO AS "학번", STUDENT_NAME AS "이름", TO_CHAR(TO_DATE(ENTRANCE_DATE), 'YYYY-MM-DD') AS "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO = 002
ORDER BY 입학년도;

-- 2. 춘 기술대학교의 교수 중 이름이 세 글자가 아닌 교수가 한 명 있다고 한다. 그 교수의 이름과 주민번호를 화면에 출력하는 SQL문장을 작성해 보자.
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE PROFESSOR_NAME NOT LIKE '___';

--
-- 3. 춘 기술대학교의 남자 교수들의 이름과 나이를 출력하는 SQL 문장을 작성하시오. 단 이때 나이가 적은 사람에서 많은 사람 순서로 화면에 출력되도록 만드시오(다시)
SELECT * FROM TB_PROFESSOR;

SELECT PROFESSOR_NAME AS "교수이름", FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19' || SUBSTR(PROFESSOR_SSN, 1, 2), 'YYYY')) / 12) AS "나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8,1) = '1'
ORDER BY 나이, 1;

SELECT EXTRACT(YEAR FROM SYSDATE) FROM DUAL;

EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM 

-- 4. 교수들의 이름 중 성을 제외한 이름만 출력하는 SQL문장을 작성하시오. 출력 헤더는 "이름"이 찍히도록 한다.(성이 2자인 교수는 없다고 가정하시오.)
SELECT SUBSTR(PROFESSOR_NAME, 2, 2)
FROM TB_PROFESSOR;

-- 5. 춘 기술대학교의 재수생 입학자를 구하려고 한다. 어떻게 찾아낼 것인가? 이때, 19살에 입학하면 재수를 하지 않은 것으로 간주한다.
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM TO_DATE(ENTRANCE_DATE)) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(STUDENT_SSN, 1, 6))) >= 20;

-- 6.  2020년 크리스마스는 무슨 요일인가?
SELECT TO_CHAR(TO_DATE(20201225), 'DAY') FROM DUAL;

-- 7. TO_DATE('99/10/11', 'YY/MM/DD'), TO_DATE('49/10/11', 'YY/MM/DD')은 각각 몇 년 몇 월 몇 일을 의미할까? 또 TO_DATE('99/10/11', 'RR/MM/DD'), TO_DATE('49/10/11', 'RR/MM/DD')은 각각 몇 년 몇 월 몇 일을 의미할까?
SELECT EXTRACT(YEAR FROM TO_DATE('99/10/11', 'YY/MM/DD')) FROM DUAL;
SELECT EXTRACT(YEAR FROM TO_DATE('49/10/11', 'YY/MM/DD')) FROM DUAL;
SELECT EXTRACT(YEAR FROM TO_DATE('99/10/11', 'RR/MM/DD')) FROM DUAL;
SELECT EXTRACT(YEAR FROM TO_DATE('49/10/11', 'RR/MM/DD')) FROM DUAL;

-- 8. 춘 기술대학교의 2000년도 이후 입학자들은 학번이 A로 시작하게 되어있다. 2000년도 이전 학번을 받은 학생들의 학번과 이름을 보여주는 SQL 문장을 작성하시오.
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) < 2000;

-- 9. 학번이 A517178인 한아름 학생의 학점 총 평균을 구하는 SQL 문을 작성하시오. 단, 이때 출력 화면의 헤더는 "평점" 이라고 찍히게 하고, 점수는 반올림하여 소수점 이하 한 자리까지만 표시한다.
SELECT ROUND(AVG(POINT), 1) AS "평점"
FROM TB_STUDENT S
JOIN TB_GRADE G ON(S.STUDENT_NO = G.STUDENT_NO)
WHERE STUDENT_NAME = '한아름';

-- 10. 학과별 학생수를 구하여 "학과번호", "학생수(명)"의 형태로 헤더를 만들어 결과값이 출력되도록 하시오.
SELECT DEPARTMENT_NO AS "학과번호", COUNT(*) AS "학생수(명)"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;

-- 11. 지도 교수를 배정받지 못한 학생의 수는 몇 명 정도 되는지 알아내는 SQL 문을 작성하시오.
SELECT COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

-- 12. 학번이 A112113인 김고운 학생의 년도 별 평점을 구하는 SQL 문을 작성하시오. 단, 이때 출력 화면의 헤더는 "년도", "년도 별 평점" 이라고 찍히게 하고, 점수는 반올림하여 소수점 이하 핚 자리까지맊 표시핚다.
SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", ROUND(SUM(POINT) / 2, 1) AS "년도 별 평점"
FROM TB_STUDENT S
JOIN TB_GRADE G ON(S.STUDENT_NO = G.STUDENT_NO)
WHERE S.STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4);

-- 13. 학과 별 휴학생 수를 파악하고자 핚다. 학과 번호와 휴학생 수를 표시하는 SQL 문장을 작성하시오. (학생 수 '0'을 표시하는 방법을 모르겠음)
SELECT DEPARTMENT_NO AS "학과코드명", COUNT(*) AS "휴학생 수"
FROM TB_STUDENT 
WHERE ABSENCE_YN = 'Y'
GROUP BY DEPARTMENT_NO
ORDER BY 1;

SELECT DEPARTMENT_NO AS "학과코드명", COUNT(DECODE(ABSENCE_YN, 'Y', ABSENCE_YN, 'N', NULL))
FROM TB_STUDENT 
GROUP BY DEPARTMENT_NO
ORDER BY 1;

-- 14. 춘 대학교에 다니는 동명이인(同名異人) 학생들의 이름을 찾고자 핚다. 어떤 SQL 문장을 사용하면 가능하겠는가?
SELECT STUDENT_NAME AS "동일이름", COUNT(*) AS "동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(*) != 1
ORDER BY 1;

-- 15. 학번이 A112113 인 김고운 학생의 년도, 학기 별 평점과 년도 별 누적 평점 , 총 평점을 구하는 SQL 문을 작성하시오. (단, 평점은 소수점 1자리까지맊 반올림하여 표시핚다.)
SELECT NVL(SUBSTR(TERM_NO, 1, 4), ' ') AS "년도", 
       NVL(SUBSTR(TERM_NO, 5, 2), ' ') AS "학기", 
       ROUND(AVG(POINT), 1) AS "평점"
FROM TB_STUDENT S
JOIN TB_GRADE G ON(S.STUDENT_NO = G.STUDENT_NO)
WHERE STUDENT_NAME = '김고운'
GROUP BY ROLLUP(SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 2));

-------------------------------------------------- ADDITIONAL SELECT - OPTION ------------------------------------------------------------------------
SELECT * FROM TB_CLASS;
SELECT * FROM TB_CLASS_PROFESSOR;
SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_GRADE;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_STUDENT;

-- 1. 학생이름과 주소지를 표시하시오. 단, 출력 헤더는 "학생 이름", "주소지"로 하고, 정렬은 이름으로 오름차순 표시하도록 핚다.
SELECT STUDENT_NAME AS "학생 이름", STUDENT_ADDRESS AS "주소지"
FROM TB_STUDENT
ORDER BY 1;

-- 2. 휴학중인 학생들의 이름과 주민번호를 나이가 적은 순서로 화면에 출력하시오.
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY 2 DESC;

-- 3. 주소지가 강원도나 경기도인 학생들 중 1900년대 학번을 가진 학생들의 이름과 학번, 주소를 이름의 오름차순으로 화면에 출력하시오. 단, 출력헤더에는 "학생이름","학번", "거주지 주소" 가 출력되도록 핚다.
SELECT STUDENT_NAME AS "학생이름", STUDENT_NO AS "학번", STUDENT_ADDRESS AS "거주지 주소"
FROM TB_STUDENT
WHERE (STUDENT_ADDRESS LIKE ('%경기도%') 
    OR STUDENT_ADDRESS LIKE ('강원도'))
    AND SUBSTR(STUDENT_NO, 1, 1) != 'A'
ORDER BY 1;

-- 4. 현재 법학과 교수 중 가장 나이가 맋은 사람부터 이름을 확인핛 수 있는 SQL 문장을 작성하시오. (법학과의 '학과코드'는 학과 테이블(TB_DEPARTMENT)을 조회해서 찾아 내도록 하자)
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR P
JOIN TB_DEPARTMENT D ON(P.DEPARTMENT_NO = D.DEPARTMENT_NO)
WHERE D.DEPARTMENT_NAME = '법학과'
ORDER BY 2;

-- 5. 2004년2학기에 'C3118100' 과목을 수강핚 학생들의 학점을 조회하려고 핚다. 학점이 높은 학생부터 표시하고, 학점이 같으면 학번이 낮은 학생부터 표시하는 구문을 작성해보시오.
SELECT STUDENT_NO, TO_CHAR(POINT, '9.99')
FROM TB_GRADE
WHERE TERM_NO = 200402 AND CLASS_NO = 'C3118100'
ORDER BY 2 DESC;

SELECT * FROM TB_CLASS;

-- 6. 학생 번호, 학생 이름, 학과 이름을 학생 이름으로 오름차순 정렬하여 출력하는 SQL 문을 작성하시오.
SELECT S.STUDENT_NO, 
       S.STUDENT_NAME, 
       D.DEPARTMENT_NAME
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO = D.DEPARTMENT_NO)
ORDER BY 2;

-- 7. 춘 기술대학교의 과목 이름과 과목의 학과 이름을 출력하는 SQL 문장을 작성하시오.
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO = D.DEPARTMENT_NO);

-- 8. 과목별 교수 이름을 찾으려고 핚다. 과목 이름과 교수 이름을 출력하는 SQL 문을 작성하시오.
SELECT C.CLASS_NAME, 
       P.PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_CLASS_PROFESSOR CP ON(C.CLASS_NO = CP.CLASS_NO)
JOIN TB_PROFESSOR P ON(CP.PROFESSOR_NO = P.PROFESSOR_NO);

-- 9. 8번의 결과 중 ‘인문사회’ 계열에 속핚 과목의 교수 이름을 찾으려고 핚다. 이에 해당하는 과목 이름과 교수 이름을 출력하는 SQL 문을 작성하시오.
SELECT C.CLASS_NAME, P.PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_CLASS_PROFESSOR CP ON(C.CLASS_NO = CP.CLASS_NO)
JOIN TB_PROFESSOR P ON(CP.PROFESSOR_NO = P.PROFESSOR_NO)
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO = D.DEPARTMENT_NO)
WHERE D.CATEGORY = '인문사회'
ORDER BY 1;

-- 10. ‘음악학과’ 학생들의 평점을 구하려고 핚다. 음악학과 학생들의 "학번", "학생 이름", "젂체 평점"을 출력하는 SQL 문장을 작성하시오. (단, 평점은 소수점 1자리까지맊 반올림하여 표시핚다.)
SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_GRADE;
SELECT * FROM TB_STUDENT;

SELECT S.STUDENT_NO AS "학번", 
       S.STUDENT_NAME AS "학생 이름", 
       ROUND(AVG(NVL(POINT, 0)), 1) AS "전체 평점"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO = D.DEPARTMENT_NO)
JOIN TB_GRADE G ON(S.STUDENT_NO = G.STUDENT_NO)
WHERE D.DEPARTMENT_NAME = '음악학과'
GROUP BY (S.STUDENT_NO, S.STUDENT_NAME)
ORDER BY 1;

-- 11. 학번이 A313047인 학생이 학교에 나오고 있지 않다. 지도 교수에게 내용을 젂달하기 위핚 학과 이름, 학생 이름과 지도 교수 이름이 필요하다. 이때 사용핛 SQL 문을 작성하시오. 단, 출력헤더는 ‚학과이름‛, ‚학생이름‛, ‚지도교수이름‛으로 출력되도록 핚다.
SELECT D.DEPARTMENT_NAME AS "학과이름", S.STUDENT_NAME AS "학생이름", P.PROFESSOR_NAME AS "지도교수이름"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO = D.DEPARTMENT_NO)
JOIN TB_PROFESSOR P ON(S.COACH_PROFESSOR_NO = P.PROFESSOR_NO)
WHERE STUDENT_NO = 'A313047';

-- 12. 2007년도에 '인갂관계롞' 과목을 수강핚 학생을 찾아 학생이름과 수강학기름 표시하는 SQL 문장을 작성하시오.
SELECT S.STUDENT_NAME, G.TERM_NO
FROM TB_STUDENT S
JOIN TB_GRADE G ON(S.STUDENT_NO = G.STUDENT_NO)
JOIN TB_CLASS C ON(G.CLASS_NO = C.CLASS_NO)
WHERE C.CLASS_NAME = '인간관계론' AND SUBSTR(G.TERM_NO, 1, 4) = '2007'
ORDER BY 1;

-- 13. 예체능 계열 과목 중 과목 담당교수를 핚 명도 배정받지 못핚 과목을 찾아 그 과목 이름과 학과 이름을 출력하는 SQL 문장을 작성하시오.
SELECT C.CLASS_NAME, D.DEPARTMENT_NAME
FROM TB_CLASS C
LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO = C.DEPARTMENT_NO)
LEFT JOIN TB_CLASS_PROFESSOR CP ON(C.CLASS_NO = CP.CLASS_NO)
WHERE D.CATEGORY = '예체능' AND PROFESSOR_NO IS NULL
ORDER BY 2;

-- 14. 춘 기술대학교 서반아어학과 학생들의 지도교수를 게시하고자 핚다. 학생이름과 지도교수 이름을 찾고 맊일 지도 교수가 없는 학생일 경우 "지도교수 미지정‛으로 표시하도록 하는 SQL 문을 작성하시오. 단, 출력헤더는 ‚학생이름‛, ‚지도교수‛로 표시하며 고학번 학생이 먼저 표시되도록 핚다.
SELECT S.STUDENT_NAME AS "학생이름", NVL(p.professor_name, '지도교수 미지정') AS "지도교수"
FROM TB_STUDENT S
LEFT JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO = D.DEPARTMENT_NO)
LEFT JOIN TB_PROFESSOR P ON(S.COACH_PROFESSOR_NO = P.PROFESSOR_NO)
WHERE d.department_name = '서반아어학과';

-- 15. 휴학생이 아닌 학생 중 평점이 4.0 이상인 학생을 찾아 그 학생의 학번, 이름, 학과 이름, 평점을 출력하는 SQL 문을 작성하시오.
SELECT S.STUDENT_NO "학번", 
       S.STUDENT_NAME "이름", 
       D.DEPARTMENT_NAME "학과 이름", 
       ROUND(AVG(NVL(G.POINT, 0)), 8) "평점"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO = D.DEPARTMENT_NO)
JOIN TB_GRADE G ON(S.STUDENT_NO = G.STUDENT_NO)
WHERE ABSENCE_YN = 'N'
GROUP BY S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME
HAVING ROUND(AVG(NVL(G.POINT, 0)), 2) >= 4.0
ORDER BY 1;

-- 16. 홖경조경학과 젂공과목들의 과목 별 평점을 파악핛 수 있는 SQL 문을 작성하시오.
SELECT C.CLASS_NO, C.CLASS_NAME, ROUND(NVL(AVG(POINT), 0), 8)
FROM TB_GRADE G 
JOIN TB_CLASS C ON(G.CLASS_NO = C.CLASS_NO)
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO = D.DEPARTMENT_NO)
WHERE D.DEPARTMENT_NAME = '환경조경학과' AND C.CLASS_TYPE LIKE '%전공%'
GROUP BY (C.CLASS_NO, C.CLASS_NAME)
ORDER BY 1;

-- 17. 춘 기술대학교에 다니고 있는 최경희 학생과 같은 과 학생들의 이름과 주소를 출력하는 SQL 문을 작성하시오.
SELECT STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO = D.DEPARTMENT_NO)
WHERE S.DEPARTMENT_NO = (
    SELECT DEPARTMENT_NO
    FROM TB_STUDENT
    WHERE STUDENT_NAME = '최경희'
);

-- 18. 국어국문학과에서 총 평점이 가장 높은 학생의 이름과 학번을 표시하는 SQL문을 작성하시오.
SELECT STUDENT_NO, STUDENT_NAME
FROM (
    SELECT S.STUDENT_NO , S.STUDENT_NAME, AVG(POINT) AS "총 평점"
    FROM TB_STUDENT S
    JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO = D.DEPARTMENT_NO)
    JOIN TB_GRADE G ON(S.STUDENT_NO = G.STUDENT_NO)
    WHERE D.DEPARTMENT_NAME = '&학과'
    GROUP BY (S.STUDENT_NO, S.STUDENT_NAME)
    ORDER BY 3 DESC
)
WHERE ROWNUM <= 1;

-- 19. 춘 기술대학교의 "홖경조경학과"가 속핚 같은 계열 학과들의 학과 별 젂공과목 평점을 파악하기 위핚 적젃핚 SQL 문을 찾아내시오. 단, 출력헤더는 "계열 학과명", "젂공평점"으로 표시되도록 하고, 평점은 소수점 핚 자리까지맊 반올림하여 표시되도록 핚다.





























