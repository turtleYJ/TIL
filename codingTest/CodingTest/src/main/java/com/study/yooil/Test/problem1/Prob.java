package com.study.yooil.Test.problem1;

public class Prob {
	/*
	 * 트럭들이 일렬로 고속도로를 운행하게 되면, 첫 번째(가장 앞에 있는) 트럭의 연료는 많이 사용되지만, 그다음 트럭들은 공기 저항을 덜 받게 되어 연료 사용량이 줄어듭니다.

여러 대의 트럭이 군집 주행을 할 때 연료를 절약하여 더 먼 거리를 이동하기 위해 선두에 선 트럭을 때때로 교체하는 방식을 사용합니다.

각 트럭이 처음에 가지고 있는 연료량이 담긴 배열 v와 선두 트럭의 시간당 연료 소비량 a, 후위 트럭의 시간당 연료 소비량 b가 매개변수로 주어집니다. 선두 트럭 교체 방식을 이용했을 때 최대 몇 시간 운행이 가능한지 return 하도록 solution 함수를 완성해주세요.

제한 사항
배열 v의 길이는 1 이상 100,000 이하입니다.
v[i]는 i번째 트럭이 가진 초기 연료량입니다.
각 트럭의 초기 연료량은 1이상 100,000 이하인 자연수입니다.
a는 1이상 1,000 이하인 자연수입니다.
b는 1이상 1,000 이하인 자연수입니다.
a는 b보다 항상 크거나 같습니다.
선두 트럭은 1시간 단위로 변경할 수 있습니다.
어느 한 트럭이라도 1시간 동안 운행할 연료량이 되지 않으면 운행을 종료합니다.
입출력 예
v	a	b	result
[4,5,5]	2	1	3
[4,4,3]	2	1	2
입출력 예 설명
입출력 예 #1
0번 트럭이 4, 1번 트럭이 5, 2번 트럭이 5만큼의 연료로 출발합니다.

처음 1시간 동안에는 아래와 같이 1번 트럭이 선두에 섭니다.

truck_1.png

1시간 후의 남은 연료량은 0번 트럭 = 3, 1번 트럭 = 3, 2번 트럭 = 4가 됩니다.

그 다음 1시간 동안은 2번 트럭이 선두에 섭니다.

truck_2.png

1시간 후의 남은 연료량은 0번 트럭 = 2, 1번 트럭 = 2, 2번 트럭 = 2가 됩니다.

그 다음은 아무 트럭이나 선두에 서도 1시간 후 적어도 하나의 트럭의 연료가 0이 됩니다. 아래 그림은 2번 트럭이 선두에 선 경우를 나타냅니다.

truck_3.png

1시간 후의 남은 연료량은 아래 그림과 같이 0번 트럭 = 1, 1번 트럭 = 1, 2번 트럭 = 0이 됩니다.

truck_4.png

2번, 1번, 0번 트럭 모두 선두에서 운행할 연료량이 되지 않으며, 2번 트럭은 선두뿐 아니라 후위에서 운행할 연료량 또한 되지 않으므로, 전체 트럭의 운행을 중단합니다. 따라서 최대 3시간 운행할 수 있습니다.

입출력 예 #2

0번 트럭이 4, 1번 트럭이 4, 2번 트럭이 3만큼의 연료로 출발합니다.

처음 1시간 동안에는 0번 트럭이 선두에 섭니다. 1시간 후 남은 연료량은 0번 트럭 = 2, 1번 트럭 = 3, 2번 트럭 = 2 가 됩니다.

다음 1시간 동안에는 1번 트럭이 선두에 섭니다. 1시간 후 남은 연료량은 0번 트럭 = 1, 1번 트럭 = 1, 2번 트럭 = 1 이 됩니다.

다음으로 선두에 서는 트럭은 남은 연료량이 2 이상이어야 하나, 남은 연료량이 2 이상인 트럭이 없으므로 운행을 중단합니다. 따라서 최대 2시간 운행할 수 있습니다.
	 */
	
	
	
	public static void main(String[] args) {
		
	}

	
	
}
