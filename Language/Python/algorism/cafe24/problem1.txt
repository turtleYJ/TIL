클라이언트 사이드 성능향상 기법
사용자가 웹요청시 서버사이드 처리 후 응답값을 사용자에게 돌려줍줍니다.
클라이언ㅌ츠 측면에서는 서버측 응답과 브라우저 랜더링이 얼마나 빠르냐에 따라서 체감속도가 달라지게 됩니다.
이 두가지 요소의 성능을 향상시킬 수 있는 방법을 아는대로 기술하세요.

답변


1. 서버 응답 시간 최적화
1.1 서버 측 캐싱:
캐싱은 서버 성능을 최적화하는 중요 기법 중 하나입니다. 서버에서 자주 요청되는 데이터를 캐싱하면, 데이터베이스 조회나 복잡한 계산 없이 빠르게 응답할 수 있습니다. 캐싱은 주로 파일 캐싱과 메모리 캐싱(Redis, Memcached)으로 나눌 수 있습니다.
- 파일 캐싱 : 대용량 데이터나 빈번히 저장되지 않는 데이터를 저장할 때 사용. (정적 파일, 대규모 로그 파일 캐싱) 
장점: 서버 재시작 시에도 데이터가 유지
단점: 파일 읽기/쓰기가 상대적으로 느림
- 메모리 캐싱: 빈번히 접근되는 데이터나 빠른 응답이 요구되는 데이터를 저장하는데 사용(사용자 세션, 실시간 애플리케이션의 임시데이터)
장점: 읽기/쓰기 속도가 빠름
단점: 서버 재시작 시 데이터 손실될 수 있음, 메모리 용량 제한적
캐싱 시 주의사항
- 캐시 만료 시간 설정: 적절한 시간 설정 필요. 최신성을 보장하면서 캐시의 장점 사용할 수 있도록 시간 설정(주로 86400초 사용)
- 데이터 일관성: 캐시된 데이터와 원본 데이터 간의 일관성을 유지할 수 있도록 갱신 및 무효화 메커니즘 구현 필요
- 보안 고려: 캐시된 데이터에 민감정보가 포함되지 않도록 확인 필요

1.2 CDN사용: 
전 세계에 분산된 서버 네트워크로, 사용자에게 가장 가까운 서버에서 콘텐츠를 제공하여 응답 시간을 단축시켜줍니다. 파일 캐싱과 마찬가지로 정적자원을 가져오는 시간을 줄여줄 수 있습니다.

1.3 비동기 프로세싱: 
서버에서 요청을 처리하는 동안 즉각적으로 응답해야할 필요가 없는 작업들은 비동기적으로 처리할 수 있습니다. 예를 들어, 특정 정보의 동기화(A디비에서 B디비로) 같은 경우 실제 실무에서 비동기 프로세스로 전환하여 작업하여 응답 시간을 줄일 수 있으며 또한, 사용자가 회원가입시, 환영 이메일을 즉시 전송하지 않고 비동기 큐에 넣어서 나중에 처리하면 서버 응답 시간이 단축됩니다. 

1.4 데이터베이스 최적화: 
데이터베이스 쿼리를 최적화하면 서버 응답 속도가 크게 향상될 수 있습니다.
- 인덱스 최적화: 특정 컬럼이 자주 조인되어 해당 컬럼에 인덱스를 추가하여 조인 성능을 향상시킨 경험이 있습니다.
- 쿼리 최적화(조인 최적화): 여러 테이블 간의 조인 시 불필요한 데이터 접근을 줄이기 위해 조인 조건을 최적화했습니다. 주로 INNER JOIN을 사용하고, 필요한 경우 OUTER JOIN을 최소화하여 성능을 개선했습니다.
- 배치성 요청 처리: 배치성으로 들어오는 대량의 요청을 효율적으로 처리하기 위해 for문을 제거하고 batch 프로세스로 처리하였습니다. 해당 작업은 데이터 이전 시 몇 천건에서 만건에 육박하는 데이터 이전의 속도를 개선하며 batch insert로 데이터베이스 부하를 줄이고, 성능을 최적화 했습니다. 이는 데이터 베이스와의 통신회수를 줄이고, 트랜잭션 관리를 효율적으로 수행함으로써 전체적인 처리 속도를 향상시켰습니다.

1.5 서버 스케일링:
서버의 부하가 증가할 때, 수평적 스케일링(서버 수 증가)과 수직적 스케일링(서버 성능 강화)을 통해 성능을 향상시킬 수 있습니다. AWS, Azure, Google Colud와 같은 클라우드 서비스를 이용하여 자동 스케일링을 통해 동적으로 서버 자원을 관리할 수 있습니다.

2. 브라우저 렌더링 최적화
2.1 이미지 최적화:
- 이미지 포맷 선택: JPEG, PNG 대신 WebP와 같은 최신 포맷을 사용하여 이미지 크기를 줄일 수 있다고 생각합니다.
- 크기 조정 및 압축: 이미지를 적절한 크기로 조정하고 압축하여 불필요한 데이터를 줄일 수 있습니다.
- 지연 로딩(Lazy Loading): 사용자가 스크롤할 때 필요한 시점에 이미지를 로드하여 초기 로딩 속도를 개선합니다.

2.2 코드 스플리팅(Code Splitting):
- JavaScript 파일을 여러 개로 나누어 필요한 부분만 로드합니다. 이를 통해 초기 로딩 시간을 단축하고, 나머지 코드는 필요할 때 로드합니다.

2.3 비동기 자원 로딩:
- CSS와 JavaScript파일을 비동기적으로 로드하여 렌더링을 차단하지 않도록 합니다.
    - '<link rel="preload">' 태그를 사용해 중요한 리소스를 미리 로드합니다.
    - '<script async>' 와 '<script defer>'  속성을 사용해 JavaScript 파일을 비동기적으로 로드합니다.

2.4 DOM 최적화:
- DOM 크기 최소화: 불필요한 DOM 노드 제거, 필요한 경우에만 DOM을 조작하여 브라우저가 빠르게 렌더링할 수 있도록 합니다.

2.5 브라우저 캐싱
- 정적 자원을 브라우저에 캐싱하여 다음 요청 시 서버로부터 재다운로드하지 않고 로컬에서 로드합니다. 적절한 캐시 만료 헤더를 설정하여 캐시된 자원의 유효 기간을 관리합니다.