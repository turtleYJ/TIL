
실시간 제품 재고 확인 아키텍처 설계 - PHP 진영

1. 아키텍처 구성 요소

1-1. 클라이언트 (프론트엔드):
   - React.js: 실시간 업데이트를 위해 React.js를 사용합니다.
   - WebSocket: 실시간 데이터를 수신하기 위해 WebSocket을 사용합니다.

1-2. 백엔드 (서버):
   - PHP + Swoole: WebSocket 서버를 운영합니다.
   - PHP (Laravel 또는 CodeIgniter): RESTful API 서버를 운영합니다.
   - Redis: 빠른 데이터 조회 및 Pub/Sub 기능을 활용합니다. (RabbitMQ도 구현 가능)
   - PostgreSQL/MySQL: 제품 및 재고 정보를 저장합니다.

1-3. 데이터베이스:
   - PostgreSQL/MySQL: 제품 정보를 저장합니다.
   - Redis: 실시간 재고 정보를 캐싱합니다.

1-4. 실시간 통신:
   - WebSocket: 클라이언트와 서버 간의 실시간 통신을 관리합니다.
   - Redis Pub/Sub: 재고 변경 이벤트를 구독하고 알림을 보냅니다.

2. 아키텍처 다이어그램

다음 다이어그램은 실시간 제품 재고 확인을 위한 PHP 진영의 아키텍처를 보여줍니다.

+--------------+          WebSocket           +-------------------+
|              | <---------------------------> |                   |
|   Browser    |                               |    PHP (Swoole)   |
| (React.js)   |                               |    WebSocket      |
|              |                               |    Server         |
+--------------+                               +-------------------+
        ^                                             |
        | HTTP                                        | Redis Pub/Sub
        |                                             |
        v                                             v
+--------------+          HTTP/RESTful API        +--------------+
|              | <------------------------------> |              |
|   Browser    |                               |    PHP          |
|  (React.js)  |                               |   (Laravel/CodeIgniter)|
|              |                               |   API Server    |
+--------------+                               +-----------------+
                                                    |
                                                    v
                                              +------------------+
                                              |                  |
                                              |  PostgreSQL      |
                                              |  MySQL           |
                                              |                  |
                                              +------------------+
                                              |                  |
                                              |  Redis           |
                                              |                  |
                                              +------------------+

3. 설명

3-1. 클라이언트:
   - 사용자가 쇼핑몰 페이지를 열면, WebSocket 서버에 연결하여 실시간으로 재고 정보를 수신합니다.
   
3-2. WebSocket 서버:
   - PHP와 Swoole을 사용해 WebSocket 서버를 구축합니다. (트래픽이 많아 고성능을 필요로하는 카페24에서는 Ratchet보다 Swoole이 더 적합할 것으로 판단)
   - 클라이언트와의 연결을 유지하고, 백엔드 서버로부터 재고 정보 업데이트를 받아 클라이언트에 브로드캐스트합니다.

3-3. 백엔드 서버:
   - Laravel 또는 CodeIgniter 사용해 RESTful API 서버를 구축합니다.
   - 재고 정보는 Redis에 캐시되며, Redis의 Pub/Sub 기능을 이용해 재고 변경 이벤트를 관리합니다.

3-4. 데이터베이스:
   - 제품 정보는 PostgreSQL 또는 MySQL에 저장되어 있으며, 초기 로드 시 서버에서 조회합니다.
   - 재고 정보는 Redis에 캐시되어 빠른 조회가 가능하도록 합니다.

3-5. 실시간 통신:
   - 클라이언트가 서버에 WebSocket 연결을 설정하면, 서버는 Redis Pub/Sub 채널을 통해 재고 변경 이벤트를 수신합니다.
   - 제품 재고가 변경되면, 서버는 해당 정보를 Redis에 업데이트하고, Pub/Sub 채널을 통해 구독자(클라이언트)에게 알립니다.
   - 클라이언트는 WebSocket을 통해 재고 변경 이벤트를 수신하고, 이를 화면에 즉시 반영합니다.

4. 실시간 재고 확인 시스템 예시
클라이언트 측(JavaScript)
// WebSocket 서버에 연결
const socket = new WebSocket('ws://localhost:9501');

// WebSocket 연결이 열리면 실행되는 이벤트 핸들러
socket.onopen = function(event) {
    console.log('WebSocket connection established');
    // 서버로 메시지 전송
    socket.send('Hello Server!');
};

// 서버로부터 메시지를 수신하면 실행되는 이벤트 핸들러
socket.onmessage = function(event) {
    const data = JSON.parse(event.data);
    console.log('Message from server: ', data);
    // UI 업데이트 로직 (예: 재고 정보 갱신)
    document.getElementById('stock-info').innerText = `Product ID: ${data.productId}, Stock: ${data.stock}`;
};

// WebSocket 연결이 닫히면 실행되는 이벤트 핸들러
socket.onclose = function(event) {
    console.log('WebSocket connection closed');
};

// 에러가 발생하면 실행되는 이벤트 핸들러
socket.onerror = function(event) {
    console.error('WebSocket error: ', event);
};

서버 측(PHP with Swoole and Redis)
<?php
use Swoole\WebSocket\Server;
use Swoole\Coroutine\Redis;

$server = new Server("0.0.0.0", 9501);

$server->on("start", function (Server $server) {
    echo "Swoole WebSocket Server is started at ws://127.0.0.1:9501\n";
});

$server->on('open', function (Server $server, $request) {
    echo "connection open: {$request->fd}\n";
});

$server->on('message', function (Server $server, $frame) {
    echo "received message: {$frame->data}\n";
    // 클라이언트에 응답 메시지 전송
    $server->push($frame->fd, json_encode(["response" => "Message received"]));
});

$server->on('close', function ($server, $fd) {
    echo "connection close: {$fd}\n";
});

// Redis Pub/Sub 설정
go(function() use ($server) {
    $redis = new Redis();
    $redis->connect('127.0.0.1', 6379);
    $redis->subscribe(['stock_updates'], function ($redis, $chan, $msg) use ($server) {
        foreach ($server->connections as $fd) {
            if ($server->isEstablished($fd)) {
                $server->push($fd, $msg);
            }
        }
    });
});

$server->start();
?>

Redis를 사용한 재고 업데이트 발행 (PHP, Swoole)
<?php
use Swoole\Coroutine\Redis;

// 예제: 주기적으로 재고 정보 업데이트
go(function() {
    $redis = new Redis();
    $redis->connect('127.0.0.1', 6379);

    while (true) {
        $stockUpdate = [
            "productId" => 123,
            "stock" => rand(0, 100)
        ];
        $redis->publish('stock_updates', json_encode($stockUpdate));
        co::sleep(5);  // 5초마다 업데이트
    }
});
?>

